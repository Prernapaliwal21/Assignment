{
  "_args": [
    [
      {
        "raw": "crc-32@~1.2.0",
        "scope": null,
        "escapedName": "crc-32",
        "name": "crc-32",
        "rawSpec": "~1.2.0",
        "spec": ">=1.2.0 <1.3.0",
        "type": "range"
      },
      "/home/prerna/Desktop/Assignment/node_modules/xlsx"
    ]
  ],
  "_from": "crc-32@~1.2.0",
  "_hasShrinkwrap": false,
  "_id": "crc-32@1.2.2",
  "_location": "/crc-32",
  "_nodeVersion": "16.14.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/crc-32_1.2.2_1649113552639_0.6220005205275192"
  },
  "_npmUser": {
    "name": "sheetjs",
    "email": "dev@sheetjs.com"
  },
  "_npmVersion": "8.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "crc-32@~1.2.0",
    "scope": null,
    "escapedName": "crc-32",
    "name": "crc-32",
    "rawSpec": "~1.2.0",
    "spec": ">=1.2.0 <1.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/xlsx"
  ],
  "_resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
  "_shasum": "3cad35a934b8bf71f25ca524b6da51fb7eace2ff",
  "_shrinkwrap": null,
  "_spec": "crc-32@~1.2.0",
  "_where": "/home/prerna/Desktop/Assignment/node_modules/xlsx",
  "author": {
    "name": "sheetjs"
  },
  "bin": {
    "crc32": "bin/crc32.njs"
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-crc32/issues"
  },
  "config": {
    "blanket": {
      "pattern": "crc32.js"
    }
  },
  "dependencies": {},
  "description": "Pure-JS CRC-32",
  "devDependencies": {
    "@sheetjs/uglify-js": "~2.7.3",
    "@types/node": "^8.0.7",
    "blanket": "~1.2.3",
    "codepage": "~1.10.0",
    "dtslint": "^0.1.2",
    "exit-on-epipe": "~1.0.1",
    "mocha": "~2.5.3",
    "printj": "~1.3.1",
    "typescript": "2.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
    "shasum": "3cad35a934b8bf71f25ca524b6da51fb7eace2ff",
    "tarball": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
    "fileCount": 9,
    "unpackedSize": 31044,
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEQCIGgCP6ojqQzwXRxfSvACf+Pv2zDixA+JGBjbrpSLI+A1AiAPWTzSbS6j4MeIrEqVZ04jnTdaN8FsgR9Q/WgGclcDzA=="
      }
    ],
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiS3nQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrKzA//fQpf4x4N/uJSk3QRBAPMechq1IdBrOJv62eU2FSgGi0hf5ti\r\n0lVmnOqlUhN72NnOCXZOFh3D8Py/dIOGyLOO5112mopNLp/dybX82ezjl5RK\r\nE8TeOKr1bwqVHEK4LJlsnY2bTLBjNQvdaKmOWY2TdVkJ1wdNSwLkEXAd2sQO\r\nCvET285NOEggd6f00qNSU/liZYC91uq/ZoiBIItk3W1YM6whMVwjCFHtvLVP\r\nb/0tq1/oFd9T6NzWv5aLlZxSqj1ZTUr/lSXNSlVsuKJQugtRB1v/wiztVZ37\r\nXYBl0axeqXOZr1txZnL38GBpd11a/1CkUAq/HqDjym8e81zV6PDttqAwl69d\r\nHtM+RGH3yEwibKyBbfkgye0Aj418wfR+nW02VF8bM5oa1DMuO2HJH3JVVUOS\r\nCxYlr6PoFdNsU8QJrXYxkQOrYRl1J0mZCwR8izO+QC6Z4DNxmrEoT9JaUEG9\r\nzKwcmJIorfIirxhF8VUBSxIv/VWsixlwgLWSaTjLWQuoDs/MWlG/bu1e3iKz\r\nns/7Crq0RamoxUo0zWDRKogok2+gXy2BCmm47RwT5tfbcrEC+UkStEhLIjEr\r\nFSkSIcXk98HyJiqVgA49VOdD77OLptNUH+np+6WL6qZrQdGW5e9Hkwa6zZ4Q\r\nxc9YfVfYuUdS34IWprc3XFyKuXSp7k+cD+M=\r\n=IOJo\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.8"
  },
  "files": [
    "crc32.js",
    "crc32c.js",
    "bin/crc32.njs",
    "LICENSE",
    "README.md",
    "types/index.d.ts",
    "types/*.json"
  ],
  "gitHead": "6a752a8568e37e824e85da3abf45ff883ae2f651",
  "homepage": "https://sheetjs.com/",
  "keywords": [
    "crc",
    "crc32",
    "checksum"
  ],
  "license": "Apache-2.0",
  "main": "crc32.js",
  "maintainers": [
    {
      "name": "sheetjs",
      "email": "dev@sheetjs.com"
    }
  ],
  "name": "crc-32",
  "optionalDependencies": {},
  "readme": "# crc32\n\nStandard CRC-32 algorithm implementation in JS (for the browser and nodejs).\nEmphasis on correctness, performance, and IE6+ support.\n\n## Installation\n\nWith [npm](https://www.npmjs.org/package/crc-32):\n\n```bash\n$ npm install crc-32\n```\n\nWhen installed globally, npm installs a script `crc32` that computes the\nchecksum for a specified file or standard input.\n\n<details>\n  <summary><b>CDN Availability</b> (click to show)</summary>\n\n|    CDN     | URL                                        |\n|-----------:|:-------------------------------------------|\n|    `unpkg` | <https://unpkg.com/crc-32/>                |\n| `jsDelivr` | <https://jsdelivr.com/package/npm/crc-32>  |\n|    `CDNjs` | <https://cdnjs.com/libraries/crc-32>       |\n\n</details>\n\n\n## Integration\n\nUsing NodeJS or a bundler:\n\n```js\nvar CRC32 = require(\"crc-32\");\n```\n\nIn the browser, the `crc32.js` script can be loaded directly:\n\n```html\n<script src=\"crc32.js\"></script>\n```\n\nThe browser script exposes a variable `CRC32`.\n\nThe script will manipulate `module.exports` if available .  This is not always\ndesirable.  To prevent the behavior, define `DO_NOT_EXPORT_CRC`.\n\n### CRC32C (Castagnoli)\n\nThe module and CDNs also include a parallel script for CRC32C calculations.\n\nUsing NodeJS or a bundler:\n\n```js\nvar CRC32C = require(\"crc-32/crc32c\");\n```\n\nIn the browser, the `crc32c.js` script can be loaded directly:\n\n```html\n<script src=\"crc32c.js\"></script>\n```\n\nThe browser exposes a variable `CRC32C`.\n\nThe script will manipulate `module.exports` if available .  This is not always\ndesirable.  To prevent the behavior, define `DO_NOT_EXPORT_CRC`.\n\n## Usage\n\nIn all cases, the relevant function takes an argument representing data and an\noptional second argument representing the starting \"seed\" (for rolling CRC).\n\nThe return value is a signed 32-bit integer.\n\n- `CRC32.buf(byte array or buffer[, seed])` assumes the argument is a sequence\n  of 8-bit unsigned integers (nodejs `Buffer`, `Uint8Array` or array of bytes).\n\n- `CRC32.bstr(binary string[, seed])` assumes the argument is a binary string\n  where byte `i` is the low byte of the UCS-2 char: `str.charCodeAt(i) & 0xFF`\n\n- `CRC32.str(string[, seed])` assumes the argument is a standard JS string and\n  calculates the hash of the UTF-8 encoding.\n\nFor example:\n\n```js\n// var CRC32 = require('crc-32');               // uncomment this line if in node\nCRC32.str(\"SheetJS\")                            // -1647298270\nCRC32.bstr(\"SheetJS\")                           // -1647298270\nCRC32.buf([ 83, 104, 101, 101, 116, 74, 83 ])   // -1647298270\n\ncrc32 = CRC32.buf([83, 104])                    // -1826163454  \"Sh\"\ncrc32 = CRC32.str(\"eet\", crc32)                 //  1191034598  \"Sheet\"\nCRC32.bstr(\"JS\", crc32)                         // -1647298270  \"SheetJS\"\n\n[CRC32.str(\"\\u2603\"),  CRC32.str(\"\\u0003\")]     // [ -1743909036,  1259060791 ]\n[CRC32.bstr(\"\\u2603\"), CRC32.bstr(\"\\u0003\")]    // [  1259060791,  1259060791 ]\n[CRC32.buf([0x2603]),  CRC32.buf([0x0003])]     // [  1259060791,  1259060791 ]\n\n// var CRC32C = require('crc-32/crc32c');       // uncomment this line if in node\nCRC32C.str(\"SheetJS\")                           // -284764294\nCRC32C.bstr(\"SheetJS\")                          // -284764294\nCRC32C.buf([ 83, 104, 101, 101, 116, 74, 83 ])  // -284764294\n\ncrc32c = CRC32C.buf([83, 104])                  // -297065629   \"Sh\"\ncrc32c = CRC32C.str(\"eet\", crc32c)              //  1241364256  \"Sheet\"\nCRC32C.bstr(\"JS\", crc32c)                       // -284764294   \"SheetJS\"\n\n[CRC32C.str(\"\\u2603\"),  CRC32C.str(\"\\u0003\")]   // [  1253703093,  1093509285 ]\n[CRC32C.bstr(\"\\u2603\"), CRC32C.bstr(\"\\u0003\")]  // [  1093509285,  1093509285 ]\n[CRC32C.buf([0x2603]),  CRC32C.buf([0x0003])]   // [  1093509285,  1093509285 ]\n```\n\n### Best Practices\n\nEven though the initial seed is optional, for performance reasons it is highly\nrecommended to explicitly pass the default seed 0.\n\nIn NodeJS with the native Buffer implementation, it is oftentimes faster to\nconvert binary strings with `Buffer.from(bstr, \"binary\")` first:\n\n```js\n/* Frequently slower in NodeJS */\ncrc32 = CRC32.bstr(bstr, 0);\n/* Frequently faster in NodeJS */\ncrc32 = CRC32.buf(Buffer.from(bstr, \"binary\"), 0);\n```\n\nThis does not apply to browser `Buffer` shims, and thus is not implemented in\nthe library directly.\n\n## Testing\n\n`make test` will run the nodejs-based test.\n\nTo run the in-browser tests, run a local server and go to the `ctest` directory.\n`make ctestserv` will start a python `SimpleHTTPServer` server on port 8000.\n\nTo update the browser artifacts, run `make ctest`.\n\nTo generate the bits file, use the `crc32` function from python `zlib`:\n\n```python\n>>> from zlib import crc32\n>>> x=\"foo bar baz٪☃🍣\"\n>>> crc32(x)\n1531648243\n>>> crc32(x+x)\n-218791105\n>>> crc32(x+x+x)\n1834240887\n```\n\nThe included `crc32.njs` script can process files or standard input:\n\n```bash\n$ echo \"this is a test\" > t.txt\n$ bin/crc32.njs t.txt\n1912935186\n```\n\nFor comparison, the included `crc32.py` script uses python `zlib`:\n\n```bash\n$ bin/crc32.py t.txt\n1912935186\n```\n\nOn OSX the command `cksum` generates unsigned CRC-32 with Algorithm 3:\n\n```bash\n$ cksum -o 3 < IE8.Win7.For.Windows.VMware.zip\n1891069052 4161613172\n$ crc32 --unsigned ~/Downloads/IE8.Win7.For.Windows.VMware.zip\n1891069052\n```\n\n## Performance\n\n`make perf` will run algorithmic performance tests (which should justify certain\ndecisions in the code).\n\nThe [`adler-32` project](http://git.io/adler32) has more performance notes\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\n## Badges\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/crc32.svg)](https://saucelabs.com/u/crc32)\n\n[![Build Status](https://travis-ci.org/SheetJS/js-crc32.svg?branch=master)](https://travis-ci.org/SheetJS/js-crc32)\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/js-crc32/master.svg)](https://coveralls.io/r/SheetJS/js-crc32?branch=master)\n[![Dependencies Status](https://david-dm.org/sheetjs/js-crc32/status.svg)](https://david-dm.org/sheetjs/js-crc32)\n[![NPM Downloads](https://img.shields.io/npm/dt/crc-32.svg)](https://npmjs.org/package/crc-32)\n[![ghit.me](https://ghit.me/badge.svg?repo=sheetjs/js-xlsx)](https://ghit.me/repo/sheetjs/js-xlsx)\n[![Analytics](https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/js-crc32?pixel)](https://github.com/SheetJS/js-crc32)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-crc32.git"
  },
  "scripts": {
    "build": "make",
    "dtslint": "dtslint types",
    "lint": "make fullint",
    "test": "make test"
  },
  "types": "types/index.d.ts",
  "typesVersions": {
    "*": {
      "*": [
        "types/index.d.ts"
      ]
    }
  },
  "version": "1.2.2"
}
