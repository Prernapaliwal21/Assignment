{
  "_args": [
    [
      {
        "raw": "deeks@2.5.1",
        "scope": null,
        "escapedName": "deeks",
        "name": "deeks",
        "rawSpec": "2.5.1",
        "spec": "2.5.1",
        "type": "version"
      },
      "/home/prerna/Desktop/Assignment/node_modules/json-2-csv"
    ]
  ],
  "_from": "deeks@2.5.1",
  "_hasShrinkwrap": false,
  "_id": "deeks@2.5.1",
  "_location": "/deeks",
  "_nodeVersion": "14.15.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/deeks_2.5.1_1628819687888_0.4071750661038851"
  },
  "_npmUser": {
    "name": "mrodrig",
    "email": "rodrigues.mi@husky.neu.edu"
  },
  "_npmVersion": "6.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deeks@2.5.1",
    "scope": null,
    "escapedName": "deeks",
    "name": "deeks",
    "rawSpec": "2.5.1",
    "spec": "2.5.1",
    "type": "version"
  },
  "_requiredBy": [
    "/json-2-csv"
  ],
  "_resolved": "https://registry.npmjs.org/deeks/-/deeks-2.5.1.tgz",
  "_shasum": "c4e18a00cac3f8ff95a306463db8f533c879f436",
  "_shrinkwrap": null,
  "_spec": "deeks@2.5.1",
  "_where": "/home/prerna/Desktop/Assignment/node_modules/json-2-csv",
  "author": {
    "name": "mrodrig"
  },
  "bugs": {
    "url": "https://github.com/mrodrig/deeks/issues"
  },
  "dependencies": {},
  "description": "Retrieve all keys and nested keys from objects and arrays of objects.",
  "devDependencies": {
    "babel-eslint": "10.1.0",
    "coveralls": "3.1.0",
    "eslint": "6.8.0",
    "mocha": "7.1.2",
    "nyc": "14.1.1",
    "should": "13.2.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-fqrBeUz7f1UqaXDRzVB5RG2EfPk15HJRrb2pMZj8mLlSTtz4tRPsK5leFOskoHFPuyZ6+7aRM9j657fvXLkJ7Q==",
    "shasum": "c4e18a00cac3f8ff95a306463db8f533c879f436",
    "tarball": "https://registry.npmjs.org/deeks/-/deeks-2.5.1.tgz",
    "fileCount": 4,
    "unpackedSize": 12967,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhFdDoCRA9TVsSAnZWagAAGYUQAJYzVP9gavjtRCEv3oIr\nvkKkREkLdoOU5nVqY/1kzWazInzAGkiTBUVqjwbRIQqP7VSgP/11gEEsPiNO\nCdzHlzpQzbu3CukjMpxygw/fNn+jgJwRVjZvK1geDJGunkSzUdN+CV3NSlBm\n7MDvags75TqSFl/iEZVwo6MKvDxKbeHWT8UwHl70mRMHOpNeZDext6H/UM78\nOpemTY0K8tBIsKeSdCTEBad5Kcv2QxXYk6cYaohmIYr22r7c3mLeNgwBotaP\nSEf0vpxXUZhpIeNyaj2SHEGGJF6wv4/gBZoaVs6RfHUjSAy6jsksQzzCVflI\nmmcEwhVEkQB+U2ZxLrKEonoXNJtakHbMydqVGqGZIZo04J0RWM3hK20DhWMk\nftFb7wJqROCeE8HzdN4vACrNSYtg8rvTCZ/n3Gi9+eKG9mQAg+sFErx51M0s\nc4vH+EzeLh9KE7in+gfC589BO6jLDeSzyNJDOP2vo56Zp3+T6OkkkxAB47IS\nKaTthmihBraJFGUQ6vj9fCryW+m1COgCErEECv/zprocrhg+qk6YIByZ3flY\nWnslmb7APteEC7cFZjZxInY1uoNwr1OWBTDzYdrbKLNQYcrc5TS+JNPAdghw\nhk0lVdEcNzBlES6Rx+gDEp9ESs8qlKJt3QlictPPnVbCq4wZGgGQpZWlRsvh\nKVVo\r\n=Pp07\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEUCIHlW7zgL1uK0zomw5IuYFT0GspV+KG+RVlPK5SywALlPAiEAhJi7U18SSZKkWjwahHCJRC9Mp/OdNWSBlH2ld9y1q3E="
      }
    ]
  },
  "engines": {
    "node": ">= 12"
  },
  "gitHead": "e6c4ddfda1d23c25aa77443ff5a988007a364918",
  "homepage": "https://mrodrig.github.io/deeks",
  "keywords": [
    "get",
    "keys",
    "object",
    "document",
    "deep",
    "deeks",
    "recursive"
  ],
  "license": "MIT",
  "main": "lib/deeks.js",
  "maintainers": [
    {
      "name": "mrodrig",
      "email": "rodrigues.mi@husky.neu.edu"
    }
  ],
  "name": "deeks",
  "optionalDependencies": {},
  "readme": "# deeks - Deep Object Key Extraction\n\n[![Dependencies](https://img.shields.io/david/mrodrig/deeks.svg)](https://www.npmjs.org/package/deeks)\n[![Downloads](http://img.shields.io/npm/dm/deeks.svg)](https://www.npmjs.org/package/deeks)\n[![NPM version](https://img.shields.io/npm/v/deeks.svg)](https://www.npmjs.org/package/deeks)\n[![Minzipped Size](https://flat.badgen.net/bundlephobia/minzip/deeks)](https://bundlephobia.com/result?p=deeks)\n\n[![Build Status](https://travis-ci.org/mrodrig/deeks.svg?branch=master)](https://travis-ci.org/mrodrig/deeks)\n[![Coverage Status](https://coveralls.io/repos/github/mrodrig/deeks/badge.svg?branch=stable)](https://coveralls.io/github/mrodrig/deeks?branch=stable)\n[![Maintainability](https://api.codeclimate.com/v1/badges/830bc7f29f61466986ac/maintainability)](https://codeclimate.com/github/mrodrig/deeks/maintainability)\n\n**Retrieve all keys and nested keys from objects and arrays of objects.**\n\n## Installing\n\n```bash\nnpm install --save deeks\n```\n\nExample: \n```javascript\nlet keys = require('deeks'),\n\tdocPath = require('doc-path');\n\nlet generatedKeys = keys.deepKeys({\n\tmake: 'Nissan',\n\tmodel: 'GT-R',\n\ttrim: 'NISMO',\n\tspecifications: [\n\t    {mileage: 10},\n\t    {cylinders: 6}\n\t]\n}, {\n    expandArrayObjects: true,\n    ignoreEmptyArraysWhenExpanding: true\n});\n// => ['make', 'model', 'trim', 'specifications.mileage', 'specifications.cylinders']\n\ngeneratedKeys.forEach((key) => \n    console.log(\n        docPath.evaluatePath(key)\n    )\n)\n// Console Output:\n// Nissan\n// GT-R\n// NISMO\n// 10\n// 6\n```\n\n## API\n\n### deepKeys(object) \n\n`keys.deepKeys(object, options)`\n\nReturns all keys in an object, even if they're nested several layers deep. \nThe array of keys that is returned can then be used with the \n[`doc-path`](https://github.com/mrodrig/doc-path) module to get and set values \nat a specific key path.\n\nOptions (optional):\n- expandArrayObjects - `Boolean` (Default: `false`) - Should objects appearing in arrays in the provided \nobject also be expanded, such that keys appearing in those objects are extracted and \nincluded in the returned key path list?\n\t- Example:\n\t```json\n\t{\n\t\t\"make\": \"Nissan\",\n\t\t\"model\": \"GT-R\",\n\t\t\"trim\": \"NISMO\",\n\t\t\"specifications\": [\n\t\t\t{\"mileage\": 10},\n\t\t\t{\"cylinders\": 6}\n\t\t]\n\t}\n\t```\n\t- expandArrayObjects = `false` results in: `['make', 'model', 'trim', 'specifications']`\n\t- expandArrayObjects = `true` results in: `['make', 'model', 'trim', 'specifications.mileage', 'specifications.cylinders']`\n- ignoreEmptyArraysWhenExpanding - `Boolean` (Default: `false`) - Should empty array keys be ignored when expanding array objects?\n\t- Note: This only has an effect when used with `expandArrayObjects`.\n\t- Example:\n\t```json\n\t{ \n\t\t\"features\": [ {\"name\": \"A/C\" }],\n\t\t\"rebates\": []\n\t}\n\t```\n\t- ignoreEmptyArraysWhenExpanding = `false` results in: `['features.name', 'rebates']`\n\t- ignoreEmptyArraysWhenExpanding = `true` results in: `['features.name']`\n- escapeNestedDots - `Boolean` (Default: `false`) - Should `.` characters that appear in keys be escaped with a preceding `\\` character?\n\t- Example:\n\t```json\n\t{\n\t\t\"a.a\": \"1\",\n\t\t\"a.b\": {\n\t\t\t\"c\": \"2\",\n\t\t\t\"c.d\": \"3\"\n\t\t}\n\t}\n\t```\n\t- escapeNestedDots = `false` results in: `['a.a', 'a.b.c', 'a.b.c.d']`\n\t- escapeNestedDots = `true` results in: `['a\\\\.a', 'a\\\\.b.c', 'a\\\\.b.c\\\\.d']`\n- ignoreEmptyArrays - `Boolean` (Default: `false`) - Should key paths for empty arrays be ignored in the generated key list?\n\t- Example:\n\t```json\n\t{\n\t\t\"a\": {\n\t\t\t\"b\": [],\n\t\t\t\"c\": {\n\t\t\t\t\"f\": 4,\n\t\t\t\t\"e\": []\n\t\t\t}\n\t\t},\n\t\t\"b\": []\n\t}\n\t```\n\t- ignoreEmptyArrays = `false` results in `['a.b', 'a.c.f', 'a.c.e', 'b']`\n\t- ignoreEmptyArrays = `true` results in `['a.c.f']`\n\nReturns: `Array[String]`\n\nExample: `['make', 'model', 'specifications.odometer.miles', 'specifications.odometer.kilometers']`\n\n### deepKeysFromList(array) \n\n`keys.deepKeysFromList(array)`\n\nReturns all keys in each object in the array, even if the keys are nested \nseveral layers deep in each of the documents. These can also be used with the \n[`doc-path`](https://github.com/mrodrig/doc-path) module.\n\nOptions (optional):\n- expandArrayObjects - `Boolean` (Default: `false`) - Should objects appearing in arrays in the provided \nobject also be expanded, such that keys appearing in those objects are extracted and \nincluded in the returned key path list?\n\t- Example:\n\t```json\n\t{\n\t\t\"make\": \"Nissan\",\n\t\t\"model\": \"GT-R\",\n\t\t\"trim\": \"NISMO\",\n\t\t\"specifications\": [\n\t\t\t{\"mileage\": 10},\n\t\t\t{\"cylinders\": 6}\n\t\t]\n\t}\n\t```\n\t- expandArrayObjects = `false` results in: `['make', 'model', 'trim', 'specifications']`\n\t- expandArrayObjects = `true` results in: `['make', 'model', 'trim', 'specifications.mileage', 'specifications.cylinders']`\n- ignoreEmptyArraysWhenExpanding - `Boolean` (Default: `false`) - Should empty array keys be ignored when expanding array objects?\n\t- Note: This only has an effect when used with `expandArrayObjects`.\n\t- Example:\n\t```json\n\t[\n\t\t{ \"features\": [ {\"name\": \"A/C\" }] },\n\t\t{ \"features\": [] }\n\t] \n\t```\n\t- ignoreEmptyArraysWhenExpanding = `false` results in: `[ ['features.name', 'features'] ]`\n\t- ignoreEmptyArraysWhenExpanding = `true` results in: `[ ['features.name'] ]`\n- escapeNestedDots - `Boolean` (Default: `false`) - Should `.` characters that appear in keys be escaped with a preceding `\\` character.\n\t- Example:\n\t```json\n\t[\n\t\t{\n\t\t\t\"a.a\": \"1\",\n\t\t\t\"a.b\": {\n\t\t\t\t\"c\": \"2\",\n\t\t\t\t\"c.d\": \"3\"\n\t\t\t}\n\t\t}\n\t]\n\t```\n\t- escapeNestedDots = `false` results in: `[ ['a.a', 'a.b.c', 'a.b.c.d'] ]`\n\t- escapeNestedDots = `true` results in: `[ ['a\\\\.a', 'a\\\\.b.c', 'a\\\\.b.c\\\\.d'] ]`\n- ignoreEmptyArrays - `Boolean` (Default: `false`) - Should key paths for empty arrays be ignored in the generated key list?\n\t- Example:\n\t```json\n\t[\n\t\t{\n\t\t\t\"a\": {\n\t\t\t\t\"b\": [],\n\t\t\t\t\"c\": {\n\t\t\t\t\t\"f\": 4,\n\t\t\t\t\t\"e\": []\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"b\": []\n\t\t}\n\t]\n\t```\n\t- ignoreEmptyArrays = `false` results in `[ ['a.b', 'a.c.f', 'a.c.e', 'b'] ]`\n\t- ignoreEmptyArrays = `true` results in `[ ['a.c.f'] ]`\n\nReturns: `Array[Array[String]]`\n\nExample: `[ ['make', 'model', 'specifications.odometer.miles', 'specifications.odometer.kilometers'] ]`\n\n## Examples\n\nThis module integrates really nicely with the \n[`doc-path`](https://github.com/mrodrig/doc-path) module, which allows\nthe programmatic getting and setting of key paths produced by this module.\n\nAdditionally, `doc-path@>=3` works with the keys returned when the `escapeNestedDots` option is specified.\n\nHere's an example of how this works:\n\n```javascript\nconst path = require('doc-path'),\n      keys = require('deeks');\n\nlet car = {\n\t\tmake: 'Nissan',\n\t\tmodel: 'GT-R',\n\t\ttrim: 'NISMO',\n\t\tspecifications: {\n\t\t\tmileage: 10,\n\t\t\tcylinders: '6'\n\t\t}\n\t},\n\t\n\tcarKeys = keys.deepKeys(car);\n\nfor(let keyPath of carKeys) {\n    // Clear all values\n    path.setPath(car, keyPath, '');\n}\n```\n\n## Tests\n\n```bash\n$ npm test\n```\n\n_Note_: This requires `mocha`, `should`, and `underscore`.\n\nTo see test coverage, please run:\n```bash\n$ npm run coverage\n```\n\nCurrent Coverage is:\n```\nStatements   : 100% ( 47/47 )\nBranches     : 100% ( 37/37 )\nFunctions    : 100% ( 18/18 )\nLines        : 100% ( 46/46 )\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mrodrig/deeks.git"
  },
  "scripts": {
    "coverage": "nyc --reporter=lcov --reporter=text-summary --reporter=text _mocha",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "lint": "eslint lib test",
    "test": "mocha test/tests.js"
  },
  "version": "2.5.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">= 12"
      },
      "pkgid": "deeks@2.5.1"
    }
  ]
}
