{
  "_args": [
    [
      {
        "raw": "for-each-property-deep@0.0.3",
        "scope": null,
        "escapedName": "for-each-property-deep",
        "name": "for-each-property-deep",
        "rawSpec": "0.0.3",
        "spec": "0.0.3",
        "type": "version"
      },
      "/home/prerna/Desktop/Assignment/node_modules/inspect-property"
    ]
  ],
  "_from": "for-each-property-deep@0.0.3",
  "_id": "for-each-property-deep@0.0.3",
  "_inCache": true,
  "_location": "/for-each-property-deep",
  "_nodeVersion": "6.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/for-each-property-deep-0.0.3.tgz_1496012895630_0.725745256524533"
  },
  "_npmUser": {
    "name": "diegozoracky",
    "email": "diego.zoracky@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "for-each-property-deep@0.0.3",
    "scope": null,
    "escapedName": "for-each-property-deep",
    "name": "for-each-property-deep",
    "rawSpec": "0.0.3",
    "spec": "0.0.3",
    "type": "version"
  },
  "_requiredBy": [
    "/inspect-property"
  ],
  "_resolved": "https://registry.npmjs.org/for-each-property-deep/-/for-each-property-deep-0.0.3.tgz",
  "_shasum": "31309a4afc38a9cca06f1b223f53d64a6d083fad",
  "_shrinkwrap": null,
  "_spec": "for-each-property-deep@0.0.3",
  "_where": "/home/prerna/Desktop/Assignment/node_modules/inspect-property",
  "author": {
    "name": "Diego ZoracKy",
    "email": "diego.zoracky@gmail.com",
    "url": "https://github.com/DiegoZoracKy/"
  },
  "dependencies": {
    "for-each-property": "0.0.4"
  },
  "description": "Executes a callback for each property found on a object, recursively on nested properties, with options regarding enumerability (enumerable or non-enumerable) and ownership (inherited or only own properties). It excludes built-in properties from Object and Function prototypes by default, and this behaviour can also be configured via options.",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^3.4.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "31309a4afc38a9cca06f1b223f53d64a6d083fad",
    "tarball": "https://registry.npmjs.org/for-each-property-deep/-/for-each-property-deep-0.0.3.tgz"
  },
  "gitHead": "4e99a6ff850527deeb44b9591c2e19139fd5e310",
  "keywords": [
    "recursive",
    "deep",
    "for",
    "each",
    "prop",
    "property",
    "object",
    "function",
    "enumerable",
    "non-enumerable",
    "nonenumerable",
    "inherited",
    "proto",
    "prototype",
    "prototype-chain",
    "class",
    "static"
  ],
  "license": "MIT",
  "main": "lib/for-each-property-deep.js",
  "maintainers": [
    {
      "name": "diegozoracky",
      "email": "diego.zoracky@gmail.com"
    }
  ],
  "name": "for-each-property-deep",
  "optionalDependencies": {},
  "readme": "# for-each-property-deep\n\n[![Build Status](https://api.travis-ci.org/DiegoZoracKy/for-each-property-deep.svg)](https://travis-ci.org/DiegoZoracKy/for-each-property-deep)\n\nExecutes a callback for each property found on a object, recursively on nested properties, with options regarding **enumerability** (enumerable or non-enumerable) and **ownership** (inherited or only own properties). It excludes built-in properties from Object and Function prototypes by default, and this behaviour can also be configured via options.\n\n## Goal\n\nThe goal is to provide a way to iterate through object's properties with a clean interface regarding **enumerability** and **ownership**, e.g. `{ enumerability: 'enumerable', inherited: true }`. Also, discarding (or not, is an option) the built-in properties that may be found when looking up on the prototype-chain.\n\nThis module is the recursive version, which will traverse object's nested properties, of [for-each-property](https://github.com/DiegoZoracKy/for-each-property).\n\n## Usage\n\n```javascript\n\nconst forEachPropertyDeep = require('for-each-property-deep');\n\nconst object = { a: { b: { c: 'cValue'} } };\nconst callback = (value, key, path, parent, state) => console.log(key, path);\nconst options = {enumerability: 'enumerable', inherited: false};\n\nconst resultState = forEachPropertyDeep(object, callback, options);\n\n// All outputs (console.log) from callback will be:\n// a [ 'a' ]\n// b [ 'a', 'b' ]\n// c [ 'a', 'b', 'c' ]\n```\n **object**:\n Literal object, Object Instance, Class Reference... Any object whose properties can be iterated on.\n\n **callback**:\n Function that will receive `(value, key, path, parent, state)`.\n\n * **value**\n Current property value\n\n * **key**\n Current property name\n\n * **path**\n An array representing the current property path. e.g. from the above example it will be `[ 'a', 'b', 'c' ]` for the `'c'` property\n\n * **parent**\n The parent object of the current property. e.g. from the above example it will be the object `{ c: 'cValue' }` for the `'c'` property\n\n * **state**\n Is an object that will be stateful throughall iterations, and it will be the value returned by calling `forEachPropertyDeep`. It can be useful to handle any data from within the callback function, instead of relying on external variables. e.g., to store and get all the *paths* found.\n\n **options**:\n * **enumerability**:\n The options are: `'enumerable'` *(default)*, `'nonenumerable'` or `'all'`\n\n * **inherited**:\n The options are: `true` *(default)* or `false`\n\n * **excludeBuiltInPropsOf**:\n An array of objects whose prototype properties must be excluded. It defaults to `[Function, Object]`\n\n * **excludeProps**:\n An array properties that must be excluded. The default is `['prototype']`\n\n## Example\n\nTo check an extended example on use cases regarding **enumerability** and **ownership** check [for-each-property#example](https://github.com/DiegoZoracKy/for-each-property#example).",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "mocha ./test"
  },
  "version": "0.0.3"
}
