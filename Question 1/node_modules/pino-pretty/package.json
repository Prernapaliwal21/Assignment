{
  "_args": [
    [
      {
        "raw": "pino-pretty@^3.2.0",
        "scope": null,
        "escapedName": "pino-pretty",
        "name": "pino-pretty",
        "rawSpec": "^3.2.0",
        "spec": ">=3.2.0 <4.0.0",
        "type": "range"
      },
      "/home/prerna/Desktop/Assignment/node_modules/logger3000"
    ]
  ],
  "_from": "pino-pretty@^3.2.0",
  "_hasShrinkwrap": false,
  "_id": "pino-pretty@3.6.1",
  "_location": "/pino-pretty",
  "_nodeVersion": "12.16.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pino-pretty_3.6.1_1583170662962_0.3233023001031463"
  },
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "6.13.4",
  "_phantomChildren": {
    "inherits": "2.0.4",
    "string_decoder": "1.1.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "pino-pretty@^3.2.0",
    "scope": null,
    "escapedName": "pino-pretty",
    "name": "pino-pretty",
    "rawSpec": "^3.2.0",
    "spec": ">=3.2.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/logger3000"
  ],
  "_resolved": "https://registry.npmjs.org/pino-pretty/-/pino-pretty-3.6.1.tgz",
  "_shasum": "61aabf9bf851d0ed831f7e9b813dea20f61116a3",
  "_shrinkwrap": null,
  "_spec": "pino-pretty@^3.2.0",
  "_where": "/home/prerna/Desktop/Assignment/node_modules/logger3000",
  "author": {
    "name": "James Sumners",
    "email": "james.sumners@gmail.com"
  },
  "bin": {
    "pino-pretty": "./bin.js"
  },
  "bugs": {
    "url": "https://github.com/pinojs/pino-pretty/issues"
  },
  "dependencies": {
    "@hapi/bourne": "^1.3.2",
    "args": "^5.0.1",
    "chalk": "^2.4.2",
    "dateformat": "^3.0.3",
    "fast-safe-stringify": "^2.0.7",
    "jmespath": "^0.15.0",
    "joycon": "^2.2.5",
    "pump": "^3.0.0",
    "readable-stream": "^3.4.0",
    "split2": "^3.1.1",
    "strip-json-comments": "^3.0.1"
  },
  "description": "Prettifier for Pino log lines",
  "devDependencies": {
    "pino": "^5.14.0",
    "pre-commit": "^1.2.2",
    "rimraf": "^3.0.0",
    "snazzy": "^8.0.0",
    "standard": "^14.0.0",
    "tap": "^14.10.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-S3bal+Yd313OEaPijbf7V+jPxVaTaRO5RQX8S/Mwdtb/8+JOgo1KolDeJTfMDTU2/k6+MHvEbxv+T1ZRfGlnjA==",
    "shasum": "61aabf9bf851d0ed831f7e9b813dea20f61116a3",
    "tarball": "https://registry.npmjs.org/pino-pretty/-/pino-pretty-3.6.1.tgz",
    "fileCount": 19,
    "unpackedSize": 263302,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeXURnCRA9TVsSAnZWagAABVwP/1+SL4inRWUWWtx3E5Jk\nCpjIK5ZfCKaNdfDXqu4DyzPU3cLRD9F4RAZwkIbE7/OKVW0Nh7jvjv6klvzC\ntjEz9tcDNGBJL6QKK1iYX33Ccgd0laC0wVuh35aYCYc5ubT/ZiP8CdTmghBL\nByUhnrNtQ6D2T418Qjmq4ljAfR8z00/GplMhEdl3vbHH9Yar2YVFt5pfRJFw\ndJWMcszPwDQhvq+It5PF+YKTYQHxiz16lUtpMNaybuyJEEB+tQkehXq2Yi0c\n4AhgcAkLnERwyo7MEozkJiI7Z30vDZBZnmSTMaT+Tgt0AR2SRxiBVEID7rI7\np3bETcSPEEmwy0OcFh2AljaR2ZFTzZsemvfe5ox4diX3qpN5gkzFSo4sCqLN\n7AVh8/tfjhiqtajHGpRD4BGW9ZmjTv6MvTv8S8PUc9V4P24wwnCmArMfVcYF\nPprTeH6+gqoeCkHO22zZWgO1pUSk1x6gMVX/7MJz9pqIr9yaajgMpZm2fsON\nL8HDzGDO6od7cs/mTiokQje6GpRdZu9PJrOFMHCv0pX7LRszJ6P51nncgSP1\nOriR2O+v7h8TNdC4oXtQpuLLpXJ9E3m5JAzAnVIi8Q6NM/HLecC/u35+gXL0\nnM/EZAVSoRZ0fNZDYF0Dy4iuagNYkoqgYKqKcNhbzV/yJ02DWvXeubkqf2KU\nQizE\r\n=trM6\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "08cb522adf23ece6d91921321805ab9423c2d55d",
  "homepage": "https://github.com/pinojs/pino-pretty#readme",
  "keywords": [
    "pino"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "davidmarkclements",
      "email": "huperekchuno@googlemail.com"
    },
    {
      "name": "jsumners",
      "email": "james.sumners@gmail.com"
    },
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    },
    {
      "name": "watson",
      "email": "w@tson.dk"
    }
  ],
  "name": "pino-pretty",
  "optionalDependencies": {},
  "precommit": [
    "lint",
    "test"
  ],
  "readme": "<a id=\"intro\"></a>\n# pino-pretty\n\n[![NPM Package Version](https://badgen.net/npm/v/pino-pretty)](https://www.npmjs.com/package/pino-pretty)\n[![Build Status](https://badgen.net/travis/pinojs/pino-pretty/master)](https://travis-ci.org/pinojs/pino-pretty)\n[![Coverage Status](https://badgen.net/coveralls/c/github/pinojs/pino-pretty/master)](https://coveralls.io/github/pinojs/pino-pretty?branch=master)\n\nThis module provides a basic [ndjson](http://ndjson.org/) formatter. If an\nincoming line looks like it could be a log line from an ndjson logger, in\nparticular the [Pino](https://getpino.io/) logging library, then it will apply\nextra formatting by considering things like the log level and timestamp.\n\nA standard Pino log line like:\n\n```\n{\"level\":30,\"time\":1522431328992,\"msg\":\"hello world\",\"pid\":42,\"hostname\":\"foo\",\"v\":1}\n```\n\nWill format to:\n\n```\n[1522431328992] INFO (42 on foo): hello world\n```\n\n<a id=\"example\"></a>\n## Example\n\nUsing the [example script][exscript] from the Pino module, and specifying\nthat logs should be colored and the time translated, we can see what the\nprettified logs will look like:\n\n![demo](demo.png)\n\n[exscript]: https://github.com/pinojs/pino/blob/fc4c83b/example.js\n\n<a id=\"install\"></a>\n## Install\n\n```sh\n$ npm install -g pino-pretty\n```\n\n<a id=\"usage\"></a>\n## Usage\n\nIt's recommended to use `pino-pretty` with `pino`\nby piping output to the CLI tool:\n\n```sh\npino app.js | pino-pretty\n```\n\n<a id=\"cliargs\"></a>\n### CLI Arguments\n\n- `--colorize` (`-c`): Adds terminal color escape sequences to the output.\n- `--crlf` (`-f`): Appends carriage return and line feed, instead of just a line\n  feed, to the formatted log line.\n- `--errorProps` (`-e`): When formatting an error object, display this list\n  of properties. The list should be a comma separated list of properties Default: `''`.\n- `--levelFirst` (`-l`): Display the log level name before the logged date and time.\n- `--errorLikeObjectKeys` (`-k`): Define the log keys that are associated with\n  error like objects. Default: `err,error`.\n- `--messageKey` (`-m`): Define the key that contains the main log message.\n  Default: `msg`.\n- `--levelKey` (`--levelKey`): Define the key that contains the level of the log.\n  Default: `level`.\n- `--messageFormat` (`-o`): Format output of message, e.g. `{level} - {pid}` will output message: `INFO - 1123`\n  Default: `false`\n- `--timestampKey` (`-m`): Define the key that contains the log timestamp.\n  Default: `time`.\n- `--translateTime` (`-t`): Translate the epoch time value into a human readable\n  date and time string. This flag also can set the format string to apply when\n  translating the date to human readable format. For a list of available pattern\n  letters see the [`dateformat` documentation](https://www.npmjs.com/package/dateformat).\n  - The default format is `yyyy-mm-dd HH:MM:ss.l o` in UTC.\n  - Require a `SYS:` prefix to translate time to the local system's timezone. A\n    shortcut `SYS:standard` to translate time to `yyyy-mm-dd HH:MM:ss.l o` in\n    system timezone.\n- `--search` (`-s`): Specify a search pattern according to\n  [jmespath](http://jmespath.org/).\n- `--ignore` (`-i`): Ignore one or several keys: (`-i time,hostname`)\n- `--config`: Specify a path to a config file containing the pino-pretty options.  pino-pretty will attempt to read from a `.pino-prettyrc` in your current directory (`process.cwd`) if not specified\n\n<a id=\"integration\"></a>\n## Programmatic Integration\n\nWe recommend against using `pino-pretty` in production, and highly\nrecommend installing `pino-pretty` as a development dependency.\n\nWhen installed, `pino-pretty` will be used by `pino` as the default\nprettifier.\n\nInstall `pino-pretty` alongside `pino` and set the\n`prettyPrint` option to `true`:\n\n```js\nconst pino = require('pino')\nconst logger = pino({\n  prettyPrint: true\n})\n\nlogger.info('hi')\n```\n\nThe `prettyPrint` option can also be an object containing `pretty-print`\noptions:\n\n```js\nconst pino = require('pino')\nconst logger = pino({\n  prettyPrint: { colorize: true }\n})\n\nlogger.info('hi')\n```\n\nSee the [Options](#options) section for all possible options.\n\n<a id=\"options\"></a>\n### Options\n\n`pino-pretty` exports a factory function that can be used to format log strings.\nThis factory function is used internally by Pino, and accepts an options argument\nwith keys corresponding to the options described in [CLI Arguments](#cliargs):\n\n```js\n{\n  colorize: chalk.supportsColor, // --colorize\n  crlf: false, // --crlf\n  errorLikeObjectKeys: ['err', 'error'], // --errorLikeObjectKeys\n  errorProps: '', // --errorProps\n  levelFirst: false, // --levelFirst\n  messageKey: 'msg', // --messageKey\n  levelKey: 'level', // --levelKey\n  messageFormat: false // --messageFormat\n  timestampKey: 'time', // --timestampKey\n  translateTime: false, // --translateTime\n  search: 'foo == `bar`', // --search\n  ignore: 'pid,hostname' // --ignore,\n  customPrettifiers: {}\n}\n```\n\nThe `colorize` default follows\n[`chalk.supportsColor`](https://www.npmjs.com/package/chalk#chalksupportscolor).\n\n`customPrettifiers` option provides the ability to add a custom prettify function\nfor specific log properties. `customPrettifiers` is an object, where keys are\nlog properties which will be prettified and value is the prettify function itself.\nFor example, if a log line contains a `query` property,\nyou can specify a prettifier for it:\n```js\n{\n  customPrettifiers: {\n    query: prettifyQuery\n  }\n}\n//...\nconst prettifyQuery = value => {\n  // do some prettify magic\n}\n```\n\n<a id=\"license\"><a>\n## License\n\nMIT License\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/pinojs/pino-pretty.git"
  },
  "scripts": {
    "lint": "standard | snazzy",
    "lint-ci": "standard",
    "test": "tap --no-cov 'test/**/*.test.js'",
    "test-ci": "tap --cov 'test/**/*.test.js'"
  },
  "version": "3.6.1"
}
