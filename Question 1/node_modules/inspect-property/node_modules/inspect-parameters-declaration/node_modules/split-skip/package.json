{
  "_args": [
    [
      {
        "raw": "split-skip@0.0.2",
        "scope": null,
        "escapedName": "split-skip",
        "name": "split-skip",
        "rawSpec": "0.0.2",
        "spec": "0.0.2",
        "type": "version"
      },
      "/home/prerna/Desktop/Assignment/node_modules/inspect-parameters-declaration"
    ],
    [
      {
        "raw": "split-skip@0.0.2",
        "scope": null,
        "escapedName": "split-skip",
        "name": "split-skip",
        "rawSpec": "0.0.2",
        "spec": "0.0.2",
        "type": "version"
      },
      "/home/prerna/Desktop/Assignment/node_modules/inspect-property/node_modules/inspect-parameters-declaration"
    ]
  ],
  "_from": "split-skip@0.0.2",
  "_id": "split-skip@0.0.2",
  "_inCache": true,
  "_location": "/inspect-property/inspect-parameters-declaration/split-skip",
  "_nodeVersion": "6.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/split-skip-0.0.2.tgz_1495940299421_0.6469964904244989"
  },
  "_npmUser": {
    "name": "diegozoracky",
    "email": "diego.zoracky@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "split-skip@0.0.2",
    "scope": null,
    "escapedName": "split-skip",
    "name": "split-skip",
    "rawSpec": "0.0.2",
    "spec": "0.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/inspect-property/inspect-parameters-declaration"
  ],
  "_resolved": "https://registry.npmjs.org/split-skip/-/split-skip-0.0.2.tgz",
  "_shasum": "d89d88bbd2f73e46b5158aa370a561224e80d461",
  "_shrinkwrap": null,
  "_spec": "split-skip@0.0.2",
  "_where": "/home/prerna/Desktop/Assignment/node_modules/inspect-property/node_modules/inspect-parameters-declaration",
  "author": {
    "name": "Diego ZoracKy",
    "email": "diego.zoracky@gmail.com",
    "url": "https://github.com/DiegoZoracKy/"
  },
  "dependencies": {},
  "description": "Splits a String into an Array of substrings with the option to skip some cases where the separator is found, based on some truthy condition.",
  "devDependencies": {
    "chai": "^4.0.0",
    "mocha": "^3.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "d89d88bbd2f73e46b5158aa370a561224e80d461",
    "tarball": "https://registry.npmjs.org/split-skip/-/split-skip-0.0.2.tgz"
  },
  "gitHead": "168a87482789806910938cf5814863d1bbe72e04",
  "keywords": [
    "split",
    "skip"
  ],
  "license": "MIT",
  "main": "lib/split-skip.js",
  "maintainers": [
    {
      "name": "diegozoracky",
      "email": "diego.zoracky@gmail.com"
    }
  ],
  "name": "split-skip",
  "optionalDependencies": {},
  "readme": "# split-skip\n\n[![Build Status](https://api.travis-ci.org/DiegoZoracKy/split-skip.svg)](https://travis-ci.org/DiegoZoracKy/split-skip)\n\nSplits a String into an Array of substrings with the option to skip some cases where the separator is found, based on some *truthy* condition.\n\n**Node.js** and **Browser** ready.\n\n## Installation\n\n```bash\nnpm install split-skip\n```\n\n## Usage\n\n```javascript\nconst splitSkip = require('split-skip');\n\n//@param {String} str - Input String\nconst str = 'Some,String,as,an,Input';\n\n// @param  {String} separator - Specifies the character(s) to use for separating the string\nconst separator = ',';\n\n// @param  {Function} skipState  - Function to be called on each iteration, to manage the skip state. Parameters: `(state, char, i)`\nconst skipState = (state, char, i) => {\n\n\t/*\n\tSome logic to define state.skip equals to some truthy value\n\te.g. state.skip = true, state.skip = 1\n\twhen it should skip if the current char matches the separator\n\t*/\n\n\t/*\n\tAnd define state.skip equals to some falsy value\n\te.g. state.skip = false, state.skip = 0\n\twhen it should get back splitting if the current char matches the separator\n\t*/\n\n\t// Must alway return the state;\n\treturn state;\n};\n\nconst resultArray = splitSkip(str, separator, skipState);\n```\n\n## Example\n\nAs an input we have a string representing the parameters definition of a function from where we want to get each individual parameter. One idea of doing this is to split on every comma, but skipping the commas that are present on destructuring parameters definitions.\nUsing splitSkip, it could be like:\n\n```javascript\nconst input = `[destru,cturu,cing]=[1],param,{dd,ee,ff}={dd:{b:1,c:2,arr:[1,6]}},last`;\n\nconst result = splitSkip(input, ',', (state, char, i) => {\n\tif ('{[('.indexOf(char) >= 0) {\n\t\tstate.skip += 1;\n\t}\n\n\tif ('}])'.indexOf(char) >= 0) {\n\t\tstate.skip -= 1;\n\t}\n\n\treturn state;\n});\n\n// result === ['[destru,cturu,cing]=[1]', 'param', '{dd,ee,ff}={dd:{b:1,c:2,arr:[1,6]}}', 'last'];\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "mocha ./test/main.test.js"
  },
  "version": "0.0.2"
}
