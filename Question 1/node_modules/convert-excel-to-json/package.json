{
  "_args": [
    [
      {
        "raw": "convert-excel-to-json@^1.6.0",
        "scope": null,
        "escapedName": "convert-excel-to-json",
        "name": "convert-excel-to-json",
        "rawSpec": "^1.6.0",
        "spec": ">=1.6.0 <2.0.0",
        "type": "range"
      },
      "/home/prerna/Desktop/Assignment"
    ]
  ],
  "_from": "convert-excel-to-json@^1.6.0",
  "_hasShrinkwrap": false,
  "_id": "convert-excel-to-json@1.7.0",
  "_location": "/convert-excel-to-json",
  "_nodeVersion": "12.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/convert-excel-to-json_1.7.0_1591581118804_0.15915998202191006"
  },
  "_npmUser": {
    "name": "diegozoracky",
    "email": "diego.zoracky@gmail.com"
  },
  "_npmVersion": "6.10.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "convert-excel-to-json@^1.6.0",
    "scope": null,
    "escapedName": "convert-excel-to-json",
    "name": "convert-excel-to-json",
    "rawSpec": "^1.6.0",
    "spec": ">=1.6.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/convert-excel-to-json/-/convert-excel-to-json-1.7.0.tgz",
  "_shasum": "f959f05d944ec38e4773680c937b63bf196941ab",
  "_shrinkwrap": null,
  "_spec": "convert-excel-to-json@^1.6.0",
  "_where": "/home/prerna/Desktop/Assignment",
  "author": {
    "name": "Diego ZoracKy",
    "email": "diego.zoracky@gmail.com",
    "url": "https://github.com/DiegoZoracKy/"
  },
  "bin": {
    "convert-excel-to-json": "./bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/DiegoZoracKy/convert-excel-to-json/issues"
  },
  "dependencies": {
    "argparse": "^1.0.2",
    "magicli": "0.0.8",
    "node.extend": "^2.0.2",
    "xlsx": "^0.12.1"
  },
  "description": "Convert Excel to JSON",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^5.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-suJs6xw5W4C/1aEPk9zZIcnIvSjeLy6vJFvQs9joBWTfpGypwjFEHopQe2QKBCz4QPLvsDHbZ7CsiouHAklL4A==",
    "shasum": "f959f05d944ec38e4773680c937b63bf196941ab",
    "tarball": "https://registry.npmjs.org/convert-excel-to-json/-/convert-excel-to-json-1.7.0.tgz",
    "fileCount": 9,
    "unpackedSize": 70297,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe3Zm/CRA9TVsSAnZWagAAuCIP/2TOV7xo04415SOJcY+k\nHnEC5jvLhKR5jTkdqDDrXuX6CH5hTRX7txpss2y9pSBLt1XF2UAcW/Y/g1RU\nBGlmyKFI1GLH7xvUVFKqycFHGMO4Xn7wb0ZLMHPhERLp5/6X9QWg6i25alba\nBZXTtLPKEl/KNXtnJzA8HhXQJZHiuh4IRMVmwh5TotjEUjIhCFOXsArPSSXG\njJnkmG3y1+IgIrrLhRadTeGAqlrMUsIB0F+cASgI9NUS09fIYhd8GQUzTFdm\nfVGYluPlObvmp/JZAZdC1in2+yg1b6UdbhEsl5xFyCq8PhnaQKvWrcn8TMQf\nejaTyxa0GKp1huuZt9J9HHcRPe9uXbGf2SwRuAVog5K1ihJ9FkjtLj1j25wH\nYC6Wm4kEQbCsa6wrAQejDLztOECWz5R4Yd7yOwuG0HfbHqAZwogZMdm1JzgS\npZi4Md9Cl7MhHJMViQwE5Ff/5LLLTua8RUpyPeyhV1npFqfsLPcgXWQY6imG\nfmAbHVuWiUzens4nRAO+j8ywMLDJSEE8oZjSAcT3gnhI05FuU9UrPobjoYeC\nBDHKM1KUeXydHmnb4rgfdlL8gWSmLYBVl+14/vaMVt/5zKhwOEXyMLqwZ/QX\n1/OPPhUU+7bnv8uHVil25mwgYhiU/aLIiDA44RivH5NIhQ7fEFJEFmbDrxbx\n9fox\r\n=jfND\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEQCIBa06KrqzVmuLTvRGOnf3ANIOanUYJsqpoAjd22cjQk+AiA866ziYN+ohlqQJkSifJCga2Y3aufZnLaXTYXm2GDx1A=="
      }
    ]
  },
  "gitHead": "3719b0263968961cf501b0e27f6ef3d0f9db5229",
  "homepage": "https://github.com/DiegoZoracKy/convert-excel-to-json/",
  "keywords": [
    "excel to json",
    "converts excel"
  ],
  "license": "MIT",
  "main": "./lib/convert-excel-to-json.js",
  "maintainers": [
    {
      "name": "diegozoracky",
      "email": "diego.zoracky@gmail.com"
    }
  ],
  "name": "convert-excel-to-json",
  "optionalDependencies": {},
  "readme": "# convert-excel-to-json\r\n\r\n[![Build Status](https://api.travis-ci.org/DiegoZoracKy/convert-excel-to-json.svg)](https://travis-ci.org/DiegoZoracKy/convert-excel-to-json)\r\n\r\nConvert Excel to JSON, mapping sheet columns to object keys.\r\n\r\nKey features:\r\n- Define a specific Range (e.g. `'A1:E6'`)\r\n- Specify a column to key mapping (e.g. `{porperty1: 'CELLVALUE A1', property2: 'CELLVALUE B1'}`)\r\n- Get just specific sheets (e.g. `{sheets: ['sheet1', 'sheet2']}`)\r\n\r\n## Install\r\n\r\n### NPM / Node\r\n\r\n```javascript\r\nnpm install convert-excel-to-json\r\n```\r\n\r\nor to use it via command-line\r\n\r\n```javascript\r\nnpm install -g convert-excel-to-json\r\n```\r\n\r\n## Usage / Examples\r\n\r\nFor all the examples, lets suppose that our excel file has two sheets, named as 'sheet1' and 'sheet2'.\r\n\r\n### CLI\r\n\r\nOBS: All the following examples can be used via command-line, in this case, the `--config` parameter expects a valid JSON string.\r\n\r\n```javascript\r\n$ convert-excel-to-json --config='{\"sourceFile\": \"tests/test-data.xlsx\"}'\r\n```\r\n\r\nIn order to use it passing in only the **sourceFile** without extra configuration:\r\n\r\n```javascript\r\n$ convert-excel-to-json --sourceFile=\"tests/test-data.xlsx\"\r\n```\r\n\r\nTo check the help section:\r\n\r\n```javascript\r\n$ convert-excel-to-json --help\r\n```\r\n\r\n### Simple conversion\r\n\r\nJust gets all the rows, for each sheet, where each row will be represented by an object with a structure like `{ COLUMN: 'CELLVALUE' }`, e.g. from a sheet with only one column ( the column A) and two rows `[{A: 'VALUE OF A1'}, {A: 'VALUE OF A2'}]`\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx'\r\n});\r\n\r\n// result will be an Object containing keys with the same name as the sheets found on the excel file. Each of the keys will have an array of objects where each of them represents a row of the container sheet. e.g. for a excel file that has two sheets ('sheet1', 'sheet2')\r\n{\r\n    sheet1: [{\r\n        A: 'data of cell A1',\r\n        B: 'data of cell B1',\r\n        C: 'data of cell C1'\r\n    }],\r\n    sheet2: [{\r\n        A: 'data of cell A1',\r\n        B: 'data of cell B1',\r\n        C: 'data of cell C1'\r\n    }]\r\n}\r\n\r\n\r\n```\r\n\r\n### Converting an xlsx that you have as a Buffer\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\nconst fs = require('fs');\r\n\r\nconst result = excelToJson({\r\n\tsource: fs.readFileSync('SOME-EXCEL-FILE.xlsx') // fs.readFileSync return a Buffer\r\n});\r\n\r\n// result will be an Object containing keys with the same name as the sheets found on the excel file. Each of the keys will have an array of objects where each of them represents a row of the container sheet. e.g. for a excel file that has two sheets ('sheet1', 'sheet2')\r\n{\r\n    sheet1: [{\r\n        A: 'data of cell A1',\r\n        B: 'data of cell B1',\r\n        C: 'data of cell C1'\r\n    }],\r\n    sheet2: [{\r\n        A: 'data of cell A1',\r\n        B: 'data of cell B1',\r\n        C: 'data of cell C1'\r\n    }]\r\n}\r\n```\r\n\r\n### Identifying header rows\r\n\r\nYou will notice that if your sheet has some top rows setup as a header (it is very common), the first position of our result will have this data, which in this case it should not be very useful. So we can tell the module how many of the rows are headers, so we can skip them and get only the data.\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\theader:{\r\n\t    // Is the number of rows that will be skipped and will not be present at our result object. Counting from top to bottom\r\n\t    rows: 1 // 2, 3, 4, etc.\r\n\t}\r\n});\r\n\r\n// result will be an Object like the previous example, but without the rows that was defined as headers\r\n```\r\n\r\n### Only to specific sheets\r\n\r\nJust gets all the rows for each sheet defined on the config object\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\theader:{\r\n\t    rows: 1\r\n\t},\r\n\tsheets: ['sheet2']\r\n});\r\n\r\n// result will be an Object like:\r\n{\r\n    sheet2: [{\r\n        A: 'data of cell A1',\r\n        B: 'data of cell B1',\r\n        C: 'data of cell C1'\r\n    }]\r\n}\r\n```\r\n\r\n### Mapping columns to keys\r\n\r\n#### One config to all sheets\r\nGets all the rows, for each sheet, but defining which columns should be returned and how they should be named on the result object.\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\tcolumnToKey: {\r\n\t\tA: 'id',\r\n\t\tB: 'firstName'\r\n\t}\r\n});\r\n\r\n// result will be an Object like:\r\n{\r\n    sheet1: [{\r\n        id: 'data of cell A1',\r\n        firstName: 'data of cell B1'\r\n    }],\r\n    sheet2: [{\r\n        id: 'data of cell A1',\r\n        firstName: 'data of cell B1'\r\n    }]\r\n}\r\n```\r\n#### Config per sheet\r\nGets all the rows, for each sheet, but defining which columns should be returned and how they should be named on the result object, **per sheet**.\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\tsheets:[{\r\n\t    name: 'sheet1',\r\n\t    columnToKey: {\r\n\t    \tA: 'id',\r\n    \t\tB: 'ProductName'\r\n\t    }\r\n\t},{\r\n\t    name: 'sheet2',\r\n\t    columnToKey: {\r\n\t    \tA: 'id',\r\n    \t\tB: 'ProductDescription'\r\n\t    }\r\n\t}]\r\n});\r\n\r\n// result will be an Object like:\r\n{\r\n    sheet1: [{\r\n        id: 'data of cell A1',\r\n        ProductName: 'data of cell B1'\r\n    }],\r\n    sheet2: [{\r\n        id: 'data of cell A1',\r\n        ProductDescription: 'data of cell B1'\r\n    }]\r\n}\r\n```\r\n\r\n**OBS:** The config *header.rows* can also be defined per sheet, like in the previous example of *columnToKey*. e.g.\r\n\r\n```javascript\r\n{\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\tsheets:[{\r\n\t    name: 'sheet1',\r\n\t    header:{\r\n\t        rows: 1\r\n\t    },\r\n\t    columnToKey: {\r\n\t    \tA: 'id',\r\n    \t\tB: 'ProductName'\r\n\t    }\r\n\t},{\r\n\t    name: 'sheet2',\r\n\t    header:{\r\n\t        rows: 3\r\n\t    },\r\n\t    columnToKey: {\r\n\t    \tA: 'id',\r\n    \t\tB: 'ProductDescription'\r\n\t    }\r\n\t}]\r\n}\r\n```\r\n\r\n### Mapping columns to keys :: Special Variables\r\n\r\n#### Cell Variables\r\n\r\nA value from a specific cell can be defined as a key name (e.g. `{ A: '{{A1}}' }`). e.g. if we have 3 rows allocated for a header, but the text value is specified at the first row:\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\theader:{\r\n\t    rows: 3\r\n\t}\r\n\tcolumnToKey: {\r\n\t\t'A': '{{A1}}',\r\n\t\t'B': '{{B1}}'\r\n\t}\r\n});\r\n\r\n// result will be an Object like:\r\n{\r\n    sheet1: [{\r\n        THE-VALUE-OF-THE-CELL-A1: 'data of cell A1',\r\n        THE-VALUE-OF-THE-CELL-B1: 'data of cell B1'\r\n    }],\r\n    sheet2: [{\r\n        THE-VALUE-OF-THE-CELL-A1: 'data of cell A1',\r\n        THE-VALUE-OF-THE-CELL-B1: 'data of cell B1'\r\n    }]\r\n}\r\n```\r\n\r\n**OBS:** {{columnHeader}} will follow the config *header.rows* or, in case it is not specified, it will always treat the first row as a header.\r\n\r\n#### Automatic key/property naming following the column header {{columnHeader}}\r\n\r\nTo return all the data but having the object keys named as a row header found at the excel, instead of the column letters, is just use two special configs. Check the following *columnToKey*:\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\tcolumnToKey: {\r\n\t\t'*': '{{columnHeader}}'\r\n\t}\r\n});\r\n\r\n// result will be an Object like:\r\n{\r\n    sheet1: [{\r\n        THE-VALUE-OF-THE-HEADER-CELL-A1: 'data of cell A1',\r\n        THE-VALUE-OF-THE-HEADER-CELL-B1: 'data of cell B1',\r\n        THE-VALUE-OF-THE-HEADER-CELL-C1: 'data of cell C1'\r\n    }],\r\n    sheet2: [{\r\n        THE-VALUE-OF-THE-HEADER-CELL-A1: 'data of cell A1',\r\n        THE-VALUE-OF-THE-HEADER-CELL-B1: 'data of cell B1',\r\n        THE-VALUE-OF-THE-HEADER-CELL-C1: 'data of cell C1'\r\n    }]\r\n}\r\n```\r\n\r\n**OBS:** {{columnHeader}} will follow the config *header.rows* or, in case it is not specified, it will always treat the first row as a header.\r\n\r\n### Range\r\n\r\nA specific range can be defined. Also like the previous configs, for all the sheets or per sheet.\r\n\r\n#### One Range for all sheets\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\trange: 'A2:B3',\r\n\tsheets: ['sheet1', 'sheet2']\r\n});\r\n\r\n// result will be an Object like:\r\n{\r\n    sheet1: [{\r\n        A: 'data of cell A2',\r\n        B: 'data of cell B2'\r\n    },{\r\n        A: 'data of cell A3',\r\n        B: 'data of cell B3'\r\n    }],\r\n    sheet2: [{\r\n        A: 'data of cell A2',\r\n        B: 'data of cell B2'\r\n    },{\r\n        A: 'data of cell A3',\r\n        B: 'data of cell B3'\r\n    }]\r\n}\r\n```\r\n\r\n#### A Range per sheet\r\n\r\n```javascript\r\n'use strict';\r\nconst excelToJson = require('convert-excel-to-json');\r\n\r\nconst result = excelToJson({\r\n\tsourceFile: 'SOME-EXCEL-FILE.xlsx',\r\n\tsheets: [{\r\n\t    name: 'sheet1',\r\n\t    range: 'A2:B2'\r\n\t},{\r\n\t    name: 'sheet2',\r\n\t    range: 'A3:B4'\r\n\t}]\r\n});\r\n\r\n// result will be an Object like this:\r\n{\r\n    sheet1: [{\r\n        A: 'data of cell A2',\r\n        B: 'data of cell B2'\r\n    ],\r\n    sheet2: [{\r\n        A: 'data of cell A3',\r\n        B: 'data of cell B3'\r\n    },{\r\n        A: 'data of cell A4',\r\n        B: 'data of cell B4'\r\n    }]\r\n}\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/DiegoZoracKy/convert-excel-to-json.git"
  },
  "scripts": {
    "test": "mocha ./tests -b"
  },
  "version": "1.7.0"
}
