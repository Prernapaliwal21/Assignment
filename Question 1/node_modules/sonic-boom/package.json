{
  "_args": [
    [
      {
        "raw": "sonic-boom@^0.7.5",
        "scope": null,
        "escapedName": "sonic-boom",
        "name": "sonic-boom",
        "rawSpec": "^0.7.5",
        "spec": ">=0.7.5 <0.8.0",
        "type": "range"
      },
      "/home/prerna/Desktop/Assignment/node_modules/pino"
    ]
  ],
  "_from": "sonic-boom@^0.7.5",
  "_hasShrinkwrap": false,
  "_id": "sonic-boom@0.7.7",
  "_location": "/sonic-boom",
  "_nodeVersion": "12.16.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sonic-boom_0.7.7_1583851845413_0.1566368236791036"
  },
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "6.14.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sonic-boom@^0.7.5",
    "scope": null,
    "escapedName": "sonic-boom",
    "name": "sonic-boom",
    "rawSpec": "^0.7.5",
    "spec": ">=0.7.5 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pino"
  ],
  "_resolved": "https://registry.npmjs.org/sonic-boom/-/sonic-boom-0.7.7.tgz",
  "_shasum": "d921de887428208bfa07b0ae32c278de043f350a",
  "_shrinkwrap": null,
  "_spec": "sonic-boom@^0.7.5",
  "_where": "/home/prerna/Desktop/Assignment/node_modules/pino",
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "bugs": {
    "url": "https://github.com/mcollina/sonic-boom/issues"
  },
  "dependencies": {
    "atomic-sleep": "^1.0.0",
    "flatstr": "^1.0.12"
  },
  "description": "Extremely fast utf8 only stream implementation",
  "devDependencies": {
    "fastbench": "^1.0.1",
    "pre-commit": "^1.2.2",
    "proxyquire": "^2.1.0",
    "standard": "^13.0.2",
    "tap": "^12.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Ei5YOo5J64GKClHIL/5evJPgASXFVpfVYbJV9PILZQytTK6/LCwHvsZJW2Ig4p9FMC2OrBrMnXKgRN/OEoAWfg==",
    "shasum": "d921de887428208bfa07b0ae32c278de043f350a",
    "tarball": "https://registry.npmjs.org/sonic-boom/-/sonic-boom-0.7.7.tgz",
    "fileCount": 10,
    "unpackedSize": 30352,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeZ6lGCRA9TVsSAnZWagAAGSoP/376XRY+QgD3nPaXKUUG\nvpbrx5hA9ty9QqkZmnKYxkwY3g7iH8fkIChg8Px4IB/XBiC9fWV6cr07YAnv\nsBWhJFfcGJRDxJWPVVw1aN6ALA0p0S0S/HP51S/19ItZQE3jQ9SmoWo5Mw5w\n1v7qMM5ujtxlIEonB7Rkvx2r9hnUFywxotpxVRz2e21XOpHVNGPN5aiuVGeF\nR4xgItU/eFzXIjVT0TXZo9xfHnz06xIHp9EhdNlWLt6tS39bnxqnWcxOhrnY\nvrBKFDiPUj2MxZ38puXAFrphkjrSga9epIHdkbt17P4xChwNNL4ucjY3ycRU\nXzd8QCQUAxveRvurMb9nMa9yB8cj45thhwDVyUxJ0G/3vgwywwH3krQIKlED\nufQSr86Bq/Er7Gq3HfSm0XdQKtXWEukTTlrNHBHx1WTRr/b1sZdcCbjq9/V4\nIwEGVRN2kJX5IKR53s5bBVuwlnVsQWjBWp48lFkyZ/U7V5NPU+l61kPtFE/e\neGpVs6aPhcMmqrEwVQO7yRBrbXggBLErTfAFXEZK20A6v/IT4Eg5HgBvHo/n\ngAQmNoyIgE+hcIBc/X/JiqYYRuIkf11NMrXlEHG3QK252F4LMHNy2R2XmgA0\n++retryt//iM4m7RYMk1W8xTv0xW+8jWjcIn57nUDRGGVPgzUOhD46y6ZgHU\njPJN\r\n=nDhq\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "21325c93f0cc48b64f809b4c8112b8505227ce90",
  "homepage": "https://github.com/mcollina/sonic-boom#readme",
  "keywords": [
    "stream",
    "fs",
    "net",
    "fd",
    "file",
    "descriptor",
    "fast"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    }
  ],
  "name": "sonic-boom",
  "optionalDependencies": {},
  "readme": "# sonic-boom&nbsp;&nbsp;[![Build Status](https://travis-ci.org/mcollina/sonic-boom.svg?branch=master)](https://travis-ci.org/mcollina/sonic-boom)\n\nExtremely fast utf8-only stream implementation to write to files and\nfile descriptors.\n\nThis implementation is partial, but support backpressure and `.pipe()` in is here.\nHowever, it is 2-3x faster than Node Core `fs.createWriteStream()`:\n\n```\nbenchSonic*1000: 2215.220ms\nbenchSonicSync*1000: 8315.173ms\nbenchSonic4k*1000: 2184.558ms\nbenchSonicSync4k*1000: 1733.582ms\nbenchCore*1000: 6513.752ms\n```\n\nNote that sync mode without buffering is _slower_ than a Node Core WritableStream, however\nthis mode matches the expected behavior of `console.log()`.\n\nNote that if this is used to log to a windows terminal (`cmd.exe` or\npowershell), it is needed to run `chcp 65001` in the terminal to\ncorrectly display utf-8 characters, see\n[chcp](https://ss64.com/nt/chcp.html) for more details.\n\n## Install\n\n```\nnpm i sonic-boom\n```\n\n## Example\n\n```js\n'use strict'\n\nconst SonicBoom = require('sonic-boom')\nconst sonic = new SonicBoom(process.stdout.fd) // or '/path/to/destination'\n\nfor (var i = 0; i < 10; i++) {\n  sonic.write('hello sonic\\n')\n}\n```\n\n## API\n\n### SonicBoom(String|Number, [minLength], [sync])\n\nCreates a new instance of SonicBoom.\n\nThe first argument can be:\n\n1. a string that is a path to a file to be written to (mode `'a'`)\n2. a file descriptor, something that is returned by `fs.open` or\n   `fs.openSync`.\n\nThe second argument is the minimum length of the internal buffer that is\nrequired before flushing.\n\nThe third argument is a flag that, when true, causes `SonicBoom` to perform synchronous writes.\n\nIt will emit the `'ready'` event when a file descriptor is available.\n\n### SonicBoom#write(string)\n\nWrites the string to the file.\nIt will return false to signal the producer to slow down.\n\n### SonicBoom#flush()\n\nWrites the current buffer to the file if a write was not in progress.\nDo nothing if `minLength`Â is zero or if it is already writing.\n\n### SonicBoom#reopen([file])\n\nReopen the file in place, useful for log rotation.\n\nExample:\n\n```js\nconst stream = new SonicBoom('./my.log')\nprocess.on('SIGUSR2', function () {\n  stream.reopen()\n})\n```\n\n### SonicBoom#flushSync()\n\nFlushes the buffered data synchronously. This is a costly operation.\n\n### SonicBoom#end()\n\nCloses the stream, the data will be flushed down asynchronously\n\n### SonicBook#destroy()\n\nCloses the stream immediately, the data is not flushed.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/sonic-boom.git"
  },
  "scripts": {
    "test": "standard && tap --no-esm -t 120 test.js"
  },
  "version": "0.7.7"
}
