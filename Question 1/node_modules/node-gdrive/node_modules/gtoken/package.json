{
  "_args": [
    [
      {
        "raw": "gtoken@^4.1.0",
        "scope": null,
        "escapedName": "gtoken",
        "name": "gtoken",
        "rawSpec": "^4.1.0",
        "spec": ">=4.1.0 <5.0.0",
        "type": "range"
      },
      "/home/prerna/Desktop/Assignment/node_modules/node-gdrive/node_modules/google-auth-library"
    ]
  ],
  "_from": "gtoken@^4.1.0",
  "_hasShrinkwrap": false,
  "_id": "gtoken@4.1.4",
  "_location": "/node-gdrive/gtoken",
  "_nodeVersion": "8.16.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gtoken_4.1.4_1578333877001_0.6142720092897362"
  },
  "_npmUser": {
    "name": "google-wombot",
    "email": "node-team-npm+wombot@google.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gtoken@^4.1.0",
    "scope": null,
    "escapedName": "gtoken",
    "name": "gtoken",
    "rawSpec": "^4.1.0",
    "spec": ">=4.1.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-gdrive/google-auth-library"
  ],
  "_resolved": "https://registry.npmjs.org/gtoken/-/gtoken-4.1.4.tgz",
  "_shasum": "925ff1e7df3aaada06611d30ea2d2abf60fcd6a7",
  "_shrinkwrap": null,
  "_spec": "gtoken@^4.1.0",
  "_where": "/home/prerna/Desktop/Assignment/node_modules/node-gdrive/node_modules/google-auth-library",
  "author": {
    "name": "Google, LLC"
  },
  "bugs": {
    "url": "https://github.com/google/node-gtoken/issues"
  },
  "dependencies": {
    "gaxios": "^2.1.0",
    "google-p12-pem": "^2.0.0",
    "jws": "^4.0.0",
    "mime": "^2.2.0"
  },
  "description": "Node.js Google Authentication Service Account Tokens",
  "devDependencies": {
    "@compodoc/compodoc": "^1.1.7",
    "@types/jws": "^3.1.0",
    "@types/mime": "^2.0.0",
    "@types/mocha": "^5.0.0",
    "@types/nock": "^10.0.0",
    "@types/node": "^10.0.3",
    "c8": "^7.0.0",
    "codecov": "^3.0.2",
    "gts": "^1.0.0",
    "intelli-espower-loader": "^1.0.1",
    "js-green-licenses": "^1.0.0",
    "linkinator": "^1.5.0",
    "mocha": "^7.0.0",
    "nock": "^11.3.2",
    "source-map-support": "^0.5.6",
    "typescript": "3.6.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-VxirzD0SWoFUo5p8RDP8Jt2AGyOmyYcT/pOUgDKJCK+iSw0TMqwrVfY37RXTNmoKwrzmDHSk0GMT9FsgVmnVSA==",
    "shasum": "925ff1e7df3aaada06611d30ea2d2abf60fcd6a7",
    "tarball": "https://registry.npmjs.org/gtoken/-/gtoken-4.1.4.tgz",
    "fileCount": 6,
    "unpackedSize": 30148,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeE3a1CRA9TVsSAnZWagAA/wYP/38dX+J+TYJDDKlApfJs\nL1HYTXACaZ4Jj3xvl6VOJbMvByAvt2LfPjT1ghCXYzQ/GQI5zQQ2m8s6qXwi\nSMFscwLlx835Z9OfoE4tRQD55YQG1jNCCwI0wvyXod9xOXOOAWtCd0UfaPn7\nPRLPGGfJeRT4YTTdbz6LEWYypVTN5/cNY3JPSI1r/77uTRsiUmcIBgg7L3Qo\nREL6gKCCVgAwBAWY0LFuL/+x/5q/iHGzPV4vA/jlL5MPioL1hiLV5bKMbkyo\nah8N7pofkQ6AJxJ9SdpFE5H06xBonxtWxudutREbpgC1XTC7p5jqdoGe6VoN\nxEmcZgWUThpAysSWJojPMdKYLv4SdNHUZfsWNo8Uq3d8rTC5BPGUPN/d0GDT\nQTj4TldveKLE3jR2aZmNyylr/r+L+afk7tmJP67a4qG16dMnpFTRobCDgEbm\nOKf1xxYozjkUPFqfBr1EIKwQGmSBkGBKn4hdDDpqYLtIWKKvAH15SQ/6gnVy\nDkzVusHjNkjUgmtmX1UOYGr5hy0sWrZkg6XJznubJlHmLTzgCNB8PJcMoitD\nluf/eOAytyIug0ni2/7cWIpbuBXOZWxvN1sveUPmN1yDJIR7bqzoQ63jmcAp\nG0fDvBLmwJY8utjYCf3acb2oTpSdcQummEXJ6dOH7RLdw+HF+lohsDi3lyA3\nkZGd\r\n=o7JZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.10.0"
  },
  "files": [
    "build/src",
    "!build/src/**/*.map"
  ],
  "gitHead": "e1dd3891f35ff6290dde3314652d784d60deb088",
  "homepage": "https://github.com/google/node-gtoken#readme",
  "keywords": [
    "google",
    "service",
    "account",
    "api",
    "token",
    "api",
    "auth"
  ],
  "license": "MIT",
  "main": "./build/src/index.js",
  "maintainers": [
    {
      "name": "google-node-team",
      "email": "node-team-npm@google.com"
    },
    {
      "name": "google-wombot",
      "email": "node-team-npm+wombot@google.com"
    },
    {
      "name": "ofrobots",
      "email": "ofrobots@google.com"
    },
    {
      "name": "soldair",
      "email": "soldair@gmail.com"
    }
  ],
  "name": "gtoken",
  "optionalDependencies": {},
  "readme": "<img src=\"https://avatars2.githubusercontent.com/u/2810941?v=3&s=96\" alt=\"Google Cloud Platform logo\" title=\"Google Cloud Platform\" align=\"right\" height=\"96\" width=\"96\"/>\n\n# [node-gtoken](https://github.com/googleapis/node-gtoken)\n\n[![npm version][npm-image]][npm-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![codecov][codecov-image]][codecov-url]\n[![Code Style: Google][gts-image]][gts-url]\n\n> Node.js Google Authentication Service Account Tokens\n\nThis is a low level utility library used to interact with Google Authentication services.  **In most cases, you probably want to use the [google-auth-library](https://github.com/googleapis/google-auth-library-nodejs) instead.**\n\n* [gtoken API Reference][client-docs]\n* [github.com/googleapis/node-gtoken](https://github.com/googleapis/node-gtoken)\n\n## Installation\n\n``` sh\nnpm install gtoken\n```\n\n## Usage\n\n### Use with a `.pem` or `.p12` key file:\n\n``` js\nconst { GoogleToken } = require('gtoken');\nconst gtoken = new GoogleToken({\n  keyFile: 'path/to/key.pem', // or path to .p12 key file\n  email: 'my_service_account_email@developer.gserviceaccount.com',\n  scope: ['https://scope1', 'https://scope2'] // or space-delimited string of scopes\n});\n\ngtoken.getToken((err, tokens) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log(tokens);\n  // {\n  //   access_token: 'very-secret-token',\n  //   expires_in: 3600,\n  //   token_type: 'Bearer'\n  // }\n});\n```\n\nYou can also use the async/await style API:\n\n``` js\nconst tokens = await gtoken.getToken()\nconsole.log(tokens);\n```\n\nOr use promises:\n\n```js\ngtoken.getToken()\n  .then(tokens => {\n    console.log(tokens)\n  })\n  .catch(console.error);\n```\n\n### Use with a service account `.json` key file:\n\n``` js\nconst { GoogleToken } = require('gtoken');\nconst gtoken = new GoogleToken({\n  keyFile: 'path/to/key.json',\n  scope: ['https://scope1', 'https://scope2'] // or space-delimited string of scopes\n});\n\ngtoken.getToken((err, tokens) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log(tokens);\n});\n```\n\n### Pass the private key as a string directly:\n\n``` js\nconst key = '-----BEGIN RSA PRIVATE KEY-----\\nXXXXXXXXXXX...';\nconst { GoogleToken } = require('gtoken');\nconst gtoken = new GoogleToken({\n  email: 'my_service_account_email@developer.gserviceaccount.com',\n  scope: ['https://scope1', 'https://scope2'], // or space-delimited string of scopes\n  key: key\n});\n```\n\n## Options\n\n> Various options that can be set when creating initializing the `gtoken` object.\n\n- `options.email or options.iss`: The service account email address.\n- `options.scope`: An array of scope strings or space-delimited string of scopes.\n- `options.sub`: The email address of the user requesting delegated access.\n- `options.keyFile`: The filename of `.json` key, `.pem` key or `.p12` key.\n- `options.key`: The raw RSA private key value, in place of using `options.keyFile`.\n\n### .getToken(callback)\n\n> Returns the cached tokens or requests a new one and returns it.\n\n``` js\ngtoken.getToken((err, token) => {\n  console.log(err || token);\n  // gtoken.rawToken value is also set\n});\n```\n\n### .getCredentials('path/to/key.json')\n\n> Given a keyfile, returns the key and (if available) the client email.\n\n```js\nconst creds = await gtoken.getCredentials('path/to/key.json');\n```\n\n### Properties\n\n> Various properties set on the gtoken object after call to `.getToken()`.\n\n- `gtoken.idToken`: The OIDC token returned (if any).\n- `gtoken.accessToken`: The access token.\n- `gtoken.expiresAt`: The expiry date as milliseconds since 1970/01/01\n- `gtoken.key`: The raw key value.\n- `gtoken.rawToken`: Most recent raw token data received from Google.\n\n### .hasExpired()\n\n> Returns true if the token has expired, or token does not exist.\n\n``` js\nconst tokens = await gtoken.getToken();\ngtoken.hasExpired(); // false\n```\n\n### .revokeToken()\n\n> Revoke the token if set.\n\n``` js\nawait gtoken.revokeToken();\nconsole.log('Token revoked!');\n```\n\n## Downloading your private `.p12` key from Google\n\n1. Open the [Google Developer Console][gdevconsole].\n2. Open your project and under \"APIs & auth\", click Credentials.\n3. Generate a new `.p12` key and download it into your project.\n\n## Converting your `.p12` key to a `.pem` key\n\nYou can just specify your `.p12` file (with `.p12` extension) as the `keyFile` and it will automatically be converted to a `.pem` on the fly, however this results in a slight performance hit. If you'd like to convert to a `.pem` for use later, use OpenSSL if you have it installed.\n\n``` sh\n$ openssl pkcs12 -in key.p12 -nodes -nocerts > key.pem\n```\n\nDon't forget, the passphrase when converting these files is the string `'notasecret'`\n\n## License\n\n[MIT](https://github.com/googleapis/node-gtoken/blob/master/LICENSE)\n\n[codecov-image]: https://codecov.io/gh/googleapis/node-gtoken/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/googleapis/node-gtoken\n[gdevconsole]: https://console.developers.google.com\n[gts-image]: https://img.shields.io/badge/code%20style-google-blueviolet.svg\n[gts-url]: https://www.npmjs.com/package/gts\n[npm-image]: https://img.shields.io/npm/v/gtoken.svg\n[npm-url]: https://npmjs.org/package/gtoken\n[snyk-image]: https://snyk.io/test/github/googleapis/node-gtoken/badge.svg\n[snyk-url]: https://snyk.io/test/github/googleapis/node-gtoken\n[client-docs]: https://googleapis.dev/nodejs/gtoken/latest/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/google/node-gtoken.git"
  },
  "scripts": {
    "clean": "gts clean",
    "compile": "tsc -p .",
    "docs": "compodoc src/",
    "docs-test": "linkinator docs",
    "fix": "gts fix",
    "lint": "gts check",
    "predocs-test": "npm run docs",
    "prepare": "npm run compile",
    "presystem-test": "npm run compile",
    "pretest": "npm run compile",
    "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
    "system-test": "mocha build/system-test",
    "test": "c8 mocha build/test"
  },
  "types": "./build/src/index.d.ts",
  "version": "4.1.4"
}
